README for perl-support.vim (Version 1.9.2) / Aug  4  2003


  *  RELEASE NOTES 
  *  FILES
  *  INSTALLATION
  *  CONFIGURATION
  *  TEMPLATE FILES AND TAGS
  *  CODE SNIPPETS
  *  PERL DICTIONARY
  *  SPEED UP TYPING
  *  CREDITS

=======================================================================================
  RELEASE NOTES 
=======================================================================================

---------------------------------------------------------------------------------------
  RELEASE NOTES FOR VERSION 1.9.2
---------------------------------------------------------------------------------------

+ Only one entry in the gVim root menu.
+ All hotkeys are only defined for Perl files.
+ Install script added.
+ Customization improved. 
+ Documentation improved.

---------------------------------------------------------------------------------------
  RELEASE NOTES FOR VERSION 1.9
---------------------------------------------------------------------------------------

+ 58 key mappings for Vim without GUI. See perl-hot-keys.pdf (reference card).
+ A marked region can be surrounded by a for-, if-, do-while- , until-, ... 
  statements (with indentation).
+ The Perl special variables have been added to the file word.list 
  for  dictionary completion.
+ Vim doc added (file perlsupport.txt).

---------------------------------------------------------------------------------------
  RELEASE NOTES FOR VERSION 1.8
---------------------------------------------------------------------------------------

+ Tag substitution rewritten (Some characters in a substitution text for a tag 
  prevented the tag from being substituted).

---------------------------------------------------------------------------------------
  RELEASE NOTES FOR VERSION 1.7
---------------------------------------------------------------------------------------

+ Block comments are now read as templates or skeletons from files:
    frame Comment,  function description,  file header
+ These templates can contain tags like |FILENAME|, |AUTHOR| etc. which are replaced
  after reading.
+ indentation: multiline inserts and code snippets will be indented after insertion.
+ Most menu entries are now also active in normal mode.
+ Reading the templates is done in one function which can be called in an autocmd.
+ Code cleanup: register z no longer used. Most function calls are silent now.


=======================================================================================
  FILES
=======================================================================================

README                                    This file.

install.sh                                Install script

plugin/perl-support.vim                   The Perl plugin for Vim/gVim.

plugin/templates/perl-file-header           -+-  Perl template files 
plugin/templates/perl-frame                  |   (see section TEMPLATE FILES below).
plugin/templates/perl-function-description  -+

-----------------------   -------------------------------------------------------------
-----------------------   The following files and extensions are for convenience only.
                          perl-support.vim will work without them.
                          -------------------------------------------------------------

rc/perl.vimrc              The minimal additions which should be added  to $HOME/.vimrc .

rc/customization.vimrc    Additional settings I use in  .vimrc:  incremental search,
                          tabstop, hot keys, font, use of dictionaries, ...
                          The file is commented. Append it to your .vimrc if you like.

rc/customization.gvimrc   Additional settings I use in  .gvimrc:
                            hot keys, mouse settings, ...
                          The file is commented. Append it to your .gvimrc if you like.

doc/perlsupport.txt       The help file for the local online help. 
                          
doc/perl-hot-keys.pdf     Reference card for the key mappings. 
                          The mappings can be used with the non-GUI Vim, 
                          because the menus are not available.


wordlists/perl.list       A file with words used as dictionary for automatic word completion. 
                          This file is referenced in the file customization.vimrc .

ftplugin/perl.vim         A filetype plugin. Define hotkeys, create a local dictionary 
                          for each Perl file.


=======================================================================================
  INSTALLATION
=======================================================================================

The subdirectories in the zip archive  perl-support.zip  mirror the directory structure 
which is needed below the local installation directory $HOME/.vim/ .

(1) Create the following directories if they do not already exist:

      mkdir $HOME/.vim
      mkdir $HOME/.vim/doc
      mkdir $HOME/.vim/ftplugin
      mkdir $HOME/.vim/plugin
      mkdir $HOME/.vim/plugin/templates
      mkdir $HOME/.vim/wordlists
      mkdir $HOME/.vim/codesnippets-perl

(2) Move the content of the corresponding subdirectories of the distribution into these
    subdirectories.

(3) Append at least the file  rc/perl.vimrc  to  $HOME/.vimrc  :

      cat rc/perl.vimrc  >> $HOME/.vimrc

(4) Start Vim or gVim and generate the local help tags file with the following command:

      :helptags $target_dir
      
    You can see an entry for the local help file when you do:

      :help local-additions

(5) Do the configuration described below (personal details, ... )


If you are on LINUX or U**X steps 1 - 3 can be done by calling the script  install.sh.


=======================================================================================
  CONFIGURATION
=======================================================================================

Several global variables are checked by the script to customize it:

  -----------------------------------------------------------------------------------
  GLOBAL VARIABLE              DEFAULT VALUE                      TAG (see below)
  -----------------------------------------------------------------------------------
  g:Perl_AuthorName            ""                                 |AUTHOR|
  g:Perl_AuthorRef             ""                                 |AUTHORREF|
  g:Perl_Email                 ""                                 |EMAIL|
  g:Perl_Company               ""                                 |COMPANY|   
  g:Perl_Project               ""                                 |PROJECT|
  g:Perl_CopyrightHolder       ""                                 |COPYRIGHTHOLDER|

  g:Perl_Template_Directory    $HOME."/.vim/plugin/templates/"
  g:Perl_Template_File         "perl-file-header"
  g:Perl_Template_Frame        "perl-frame"
  g:Perl_Template_Function     "perl-function-description"

  g:Perl_CodeSnippets          $HOME."/.vim/codesnippets-perl"
  g:Perl_Pager                 "less"
  g:Perl_LoadMenus             "yes"
  g:Perl_Dictionary_File       $HOME."/.vim/wordlists/perl.list"
  -----------------------------------------------------------------------------------

1. group: Defines the text which will be inserted for the tags when a template  
          is read in (see below).

2. group: Sets the template directory and the names of the template files (see below).

3. group: g:Perl_CodeSnippets    : The name of the code snippet directory (see below).
          g:Perl_Pager           : The name of the filter used when the output of a 
                                   Perl script is run through a filter for paging 
                                   through text.
          g:Perl_LoadMenus       : Load menus and mappings ("yes", "no") at startup.
          g:Perl_Dictionary_File : Path and filename of the Perl word list used for
                                   dictionary completion (see below).
          
To override the default add appropriate assignments to .vimrc .
Here are my settings as an example:

  let g:Perl_AuthorName      = "Dr.-Ing. Fritz Mehner"     
  let g:Perl_AuthorRef       = "Mn"                         
  let g:Perl_Email           = "mehner@fh-swf.de"            
  let g:Perl_Company         = "FH Südwestfalen, Iserlohn"    


=======================================================================================
  TEMPLATE FILES AND TAGS
=======================================================================================

Three menu entries generate block comments:

    Perl -> Comments -> Frame Comment
    Perl -> Comments -> Function Description
    Perl -> Comments -> File Header

The comments which will be inserted by these menu entries are read from template files:

  ----------------------------------------------------------------------------------
  MENU ENTRY                FILE (in ./plugin/templates )   GLOBAL VARIABLE         
  ----------------------------------------------------------------------------------
  Frame Comment             perl-frame                      g:Perl_Template_Frame   
  Function Description      perl-function-description       g:Perl_Template_Function
  File Header               perl-file-header                g:Perl_Template_File    
  ----------------------------------------------------------------------------------

The template files can be written or changed by the user to fulfill special
requirements (layout for a project or workgroup already exists, file headers /
blocks have to be prepared for a documentation tool, ... ).  They can hold not
only comments but a complete file skeleton if this is necessary.  So you may
want to lay out your own templates.

The comments in these files do not have to be personalized but they can be.
The text can contain the following tags which are replaced by the appropriate
information when the file is read in:

    |AUTHOR|
    |DATE|
    |EMAIL|
    |FILENAME|
    |YEAR|

    |AUTHORREF|
    |COMPANY|
    |COPYRIGHTHOLDER|
    |PROJECT|
    |TIME|

    |CURSOR|

Each tag can occur more than once. The tag |CURSOR| may appear only once.
The tag |CURSOR| will be the cursor position after the block is read in.
There is no need to use any of these tags, some or all can be missing.

The template files can actually be links pointing to existing templates.


=======================================================================================
  CODE SNIPPETS
=======================================================================================

Code snippets are pieces of code which are kept in separate files in a special 
directory. File names are used to identify the snippets.
The snippet directory has to be created by the user 
( $HOME/.vim/codesnippets-perl is the default).
Snippets are managed with the 3 entries 

   Perl -> Idioms -> read  code snippet
   Perl -> Idioms -> write code snippet
   Perl -> Idioms -> edit  code snippet

from the Idioms submenu.

Creating a new snippet:  
-----------------------
When nothing is marked, "write code snippet" will write the whole buffer 
to a snippet file, otherwise the marked area will be written to a file.

Insert a snippet:
-----------------
Select the appropriate file from the snippet directory ("read  code snippet").
The inserted lines will be indented.
Creating a new snippet:  


=======================================================================================
  PERL DICTIONARY
=======================================================================================

The file  perl.list  contains words used as dictionary for automatic word completion. 
In order to use this feature

(1) copy this file to an appropriate location, e.g.

      $HOME/.vim/wordlists/perl.list

(2) and put the following line into  .vimrc  (see customization.vimrc) :

      let g:Perl_Dictionary_File   = $HOME."/.vim/wordlists/perl.list"

(3) Copy the filetype plugin  ftplugin/perl.vim  to 

      $HOME/.vim/ftplugin/perl.vim
  
This will create a local dictionary for each Perl file and enable keyword 
completion for Perl using Vim's dictionary feature CTRL-X CTRL-K.


=======================================================================================
  SPEED UP TYPING / SAVE KEYSTROKES
=======================================================================================

(1) gvim. Toggle 'insert mode' <--> 'normal mode' with the right mouse button
    (see mapping in file customization.gvimrc).

(2) gvim. Use tear off menus and

(3) try 'Focus under mouse' as window behavior (No mouse click when the mouse
    pointer is back from the menu entry).

(4) Use Emulate3Buttons "on" (X11) even for a 3-button mouse. Pressing left and
    right button simultaneously without moving your fingers is faster then 
    moving a finger to the middle button (often a wheel).


=======================================================================================
  CREDITS
=======================================================================================

Lukas Zapletal for the errorformat (taken from the script perl.vim).

David Fishburn <fishburn@ianywhere.com> for the implementation of the 
  single root menu and several suggestions for improving the customization
  and the documentation.

=======================================================================================
