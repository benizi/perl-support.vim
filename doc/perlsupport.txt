*perlsupport.txt*          Perl Support             Last Change: Aug  4  2003

Perl Support                                     *perl-support* *perlsupport*
                            Plugin version 1.9.2
                      for Vim version 6.0 and above
                     Fritz Mehner  <mehner@fh-swf.de>

Write and run Perl scripts using menus and key mappings.

|perlsupport-usage-gvim|     Usage with GUI 
|perlsupport-usage-vim|      Usage without GUI
|perlsupport-hotkeys|        Hotkeys
|perlsupport-customization|  Customization and configuration
|perlsupport-template-files| The Perl template files
|perlsupport-code-snippets|  Code Snippets
|perlsupport-dictionary|     Perl Dictionary
|perlsupport-release-notes|  Release Notes
|perlsupport-credits|        Credits
|add-local-help|             How to add this help file to vim's help


==============================================================================
USAGE WITH GUI  (gVim)                                *perlsupport-usage-gvim*
==============================================================================

If the menus are not visible call them with the entry "Load Perl Support"
in the entry Tools in the root menu.


Menu 'Comments'
------------------
Frame comments, file header comments and function descriptions are read as
templates from the appropriate files (see |perlsupport-customization|).

'code-comment' and 'comment->code' is for commenting/uncommenting 
visually selected blocks.

Menu 'Statements'
--------------------
Normal mode, insert mode: 
The statements will be inserted below the current line.
Visual mode:
The highlighted area (complete lines) will be surrounded by a statement.

Menu 'Idioms'
--------------------
All declarations beginning with 'my' and the multiline statements (subroutine,
open input file / output file / pipe) will be inserted as a new line(s) below 
the current one.
Everything else will be inserted at the cursor position. 

Multiline inserts and code snippets will be indented after insertion.

==============================================================================
USAGE WITHOUT GUI  (Vim)                               *perlsupport-usage-vim*
==============================================================================

The frequently used constructs can be inserted with key mappings:

  -- Load / Unload Perl Support ------------

  \lps    Load Perl Support    (The key mappings below are defined)
  \ups    Unload Perl Support  (The key mappings below are undefined.)

  -- Comments ------------------------------

  \cl     Line End Comment             
  \cf     Frame Comment                
  \cu     Function Description         
  \ch     File Header                  
  \ckb    Keyword comment BUG          
  \ckt    Keyword comment TODO         
  \ckr    Keyword comment TRICKY       
  \ckw    Keyword comment WARNING      
  \ckn    Keyword comment New_Keyword  
  \cc     code to comment              
  \co     comment to code              
  \cd     Date                         
  \ct     Date & Time                  
  \cv     vim modeline                 
                                     
  -- Statements ----------------------------

  \ad     do { } while                 
  \af     for { }                      
  \ao     foreach { }                  
  \ai     if { }                           
  \ae     if { } else { }                  
  \au     unless { }                       
  \an     unless { } else { }              
  \at     until { }                        
  \aw     while { }                        

  -- Idioms --------------------------------

  \dm     my $;             
  \dy     my $ = ;          
  \d,     my ( $, $ );      
  \d1     my @;             
  \d2     my @ = (,,);      
  \d3     my %;             
  \d4     my % = (=>,=>,);  
  \d5     my $regex_ = '';  
  \d6     my $regex_ = qr//;
  \d7     $ =~ m//          
  \d8     $ =~ s///         
  \d9     $ =~ tr///        
  \dp     print "...\n";    
  \df     printf ("...\n"); 
  \ds     subroutine        
  \di     open input file   
  \do     open output file  
  \de     open pipe         

  -- POSIX Character Classes ---------------

  \la     [:alnum:] 
  \lh     [:alpha:] 
  \li     [:ascii:] 
  \lc     [:cntrl:] 
  \ld     [:digit:] 
  \lg     [:graph:] 
  \ll     [:lower:] 
  \lp     [:print:] 
  \ln     [:punct:] 
  \ls     [:space:] 
  \lu     [:upper:] 
  \lw     [:word:]   
  \lx     [:xdigit:]

  -- Run -----------------------------------

  \rx     make script executable
  \rh     hardcopy buffer to FILENAME.ps


File perl-hot-keys.pdf contains a reference card for these key mappings.
Multiline inserts and code snippets will be indented after insertion.

The hotkeys are defined in the filetype plugin perl.vim (part of this
perl-support plugin package).

==============================================================================
HOTKEYS                                                  *perlsupport-hotkeys*
==============================================================================

The following hotkeys are defined in normal, visual and insert mode: 

   Shift-F1   read perldoc  (for the word under the cursor)
    Ctrl-F9   run script
         F9   run script with pager
     Alt-F9   run syntax check


==============================================================================
CUSTOMIZATION                                      *perlsupport-customization*
==============================================================================

Several global variables are checked by the script to customize it:

------------------------------------------------------------------------------
GLOBAL VARIABLE            DEFAULT VALUE                     TAG (see below)
------------------------------------------------------------------------------
g:Perl_AuthorName          ""                                |AUTHOR|
g:Perl_AuthorRef           ""                                |AUTHORREF|
g:Perl_Email               ""                                |EMAIL|
g:Perl_Company             ""                                |COMPANY|   
g:Perl_Project             ""                                |PROJECT|
g:Perl_CopyrightHolder     ""                                |COPYRIGHTHOLDER|

g:Perl_Template_Directory  $HOME."/.vim/plugin/templates/"
g:Perl_Template_File       "perl-file-header"
g:Perl_Template_Frame      "perl-frame"
g:Perl_Template_Function   "perl-function-description"

g:Perl_CodeSnippets        $HOME."/.vim/codesnippets-perl"
g:Perl_Pager               "less"
g:Perl_LoadMenus           "yes"
g:Perl_Dictionary_File     $HOME."/.vim/wordlists/perl.list"
--------------------------------------------------------------------------------

1. group: Defines the text which will be inserted for the tags when a template  
          is read in (see below).

2. group: Sets the template directory and the names of the template files (see below).

3. group: g:Perl_CodeSnippets    : The name of the code snippet directory (see below).
          g:Perl_Pager           : The name of the filter used when the output of a 
                                   Perl script is run through a filter for paging 
                                   through text.
          g:Perl_LoadMenus       : Load menus and mappings ("yes", "no") at startup.
          g:Perl_Dictionary_File : Path and filename of the Perl word list used for
                                   dictionary completion (see below).
          
To override the default add appropriate assignments to .vimrc .
Here are my settings as an example:

  let g:Perl_AuthorName      = "Dr.-Ing. Fritz Mehner"     
  let g:Perl_AuthorRef       = "Mn"                         
  let g:Perl_Email           = "mehner@fh-swf.de"            
  let g:Perl_Company         = "FH Südwestfalen, Iserlohn"    


==============================================================================
TEMPLATE FILES                                    *perlsupport-template-files*
==============================================================================

Three menu entries generate block comments:

    Perl -> Comments -> Frame Comment
    Perl -> Comments -> Function Description
    Perl -> Comments -> File Header

The comments which will be inserted by these menu entries are read from 
template files:

------------------------------------------------------------------------------
MENU ENTRY              FILE                          GLOBAL VARIABLE         
------------------------------------------------------------------------------
Frame Comment           perl-frame                    g:Perl_Template_Frame   
Function Description    perl-function-description     g:Perl_Template_Function
File Header             perl-file-header              g:Perl_Template_File    
------------------------------------------------------------------------------

The template files can be written or changed by the user to fulfill special
requirements (layout for a project or workgroup already exists, file headers /
blocks have to be prepared for a documentation tool, ... ).  They can hold not
only comments but a complete file skeleton if this is necessary.  So you may
want to lay out your own templates.

The comments in these files do not have to be personalized but they can be.
The text can contain the following tags which are replaced by the appropriate
information when the file is read in:

    |AUTHOR|
    |DATE|
    |EMAIL|
    |FILENAME|
    |YEAR|

    |AUTHORREF|
    |COMPANY|
    |COPYRIGHTHOLDER|
    |PROJECT|
    |TIME|

    |CURSOR|

Each tag can occur more than once. The tag |CURSOR| may appear only once.
The tag |CURSOR| will be the cursor position after the block is read in.
There is no need to use any of these tags, some or all can be missing.

The template files can actually be links pointing to existing templates.


==============================================================================
CODE SNIPPETS                                      *perlsupport-code-snippets*
==============================================================================

Code snippets are pieces of code which are kept in separate files in a special 
directory. File names are used to identify the snippets.
The snippet directory has to be created by the user 
( $HOME/.vim/codesnippets-perl is the default).
Snippets are managed with the 3 entries 

   Perl -> Idioms -> read  code snippet
   Perl -> Idioms -> write code snippet
   Perl -> Idioms -> edit  code snippet

from the Idioms submenu.

Creating a new snippet:  
-----------------------
When nothing is marked, "write code snippet" will write the whole buffer 
to a snippet file, otherwise the marked area will be written to a file.

Insert a snippet:
-----------------
Select the appropriate file from the snippet directory ("read  code snippet").
The inserted lines will be indented.


==============================================================================
PERL DICTIONARY                                       *perlsupport-dictionary*
==============================================================================

The file  perl.list  contains words used as dictionary entries for automatic 
word completion. In order to use this feature

(1) copy this file to an appropriate location, e.g.

  $HOME/.vim/wordlists/perl.list

(2) and put the following line into  .vimrc  (see customization.vimrc) :

  let g:Perl_Dictionary_File   = $HOME."/.vim/wordlists/perl.list"

(3) Copy the filetype plugin  ftplugin/perl.vim  to 

  $HOME/.vim/ftplugin/perl.vim

This will create a local dictionary for each Perl file and enable keyword 
completion for Perl using Vim's dictionary feature CTRL-X CTRL-K.


==============================================================================
RELEASE NOTES                                      *perlsupport-release-notes*
==============================================================================
  
------------------------------------------------------------------------------
  RELEASE NOTES FOR VERSION 1.9.2
------------------------------------------------------------------------------
+ Only one entry in the gVim root menu.
+ All hotkeys are only defined for Perl files.
+ Install script added.
+ Customization improved. 
+ Documentation improved.

------------------------------------------------------------------------------
  RELEASE NOTES FOR VERSION 1.9
------------------------------------------------------------------------------
+ 58 key mappings for Vim without GUI. See perl-hot-keys.pdf (reference card).
+ A marked region can be surrounded by a for-, if-, do-while- , until-, ... 
  statements (with indentation).
+ The Perl special variables have been added to the file word.list 
  for  dictionary completion.
+ Vim doc added (file perlsupport.txt).

------------------------------------------------------------------------------
  RELEASE NOTES FOR VERSION 1.8
------------------------------------------------------------------------------
+ Tag substitution rewritten (Some characters in a substitution text for a tag 
  prevented the tag from being substituted).

------------------------------------------------------------------------------
  RELEASE NOTES FOR VERSION 1.7
------------------------------------------------------------------------------
+ Block comments are now read as templates or skeletons from files:
    frame Comment,  function description,  file header
+ These templates can contain tags like |FILENAME|, |AUTHOR| etc. which are 
  replaced  after reading.
+ indentation: multiline inserts and code snippets will be indented after 
  insertion.
+ Most menu entries are now also active in normal mode.
+ Reading the templates is done in one function which can be called in 
  an autocmd.
+ Code cleanup: register z no longer used. Most function calls are silent now.

==============================================================================
CREDITS                                                  *perlsupport-credits*
==============================================================================

Lukas Zapletal for the errorformat (taken from the script perl.vim).

David Fishburn <fishburn@ianywhere.com> for the implementation of the 
  single root menu and several suggestions for improving the customization
  and the documentation.

==============================================================================
vim:tw=78:noet:ts=2:ft=help:norl:
